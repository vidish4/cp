A parentheses string is valid if and only if:

It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.

For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.

 

Example 1:

Input: s = "())"
Output: 1
Example 2:

Input: s = "((("
Output: 3
 

Constraints:

1 <= s.length <= 1000
s[i] is either '(' or ')'.

Using Stack Time: O(n) Space: O(n)
class Solution {
public:
    int minAddToMakeValid(string s) {
        if (s.size()==0)
            return s.size();
        stack<char> st;
        for (auto i:s)
        {
            if (st.empty())
                st.push(i);
            else 
            {
                if (i=='(')
                    st.push(i);
                else if (i==')' && st.top()=='(')
                    st.pop();
                else
                    st.push(i);
            }
        }
        return st.size();
    }
};

Using bal+ans Time: O(n) Space: O(1)
Keep a balance and answer counter. 
bal==0 indicates valid parenthesis
bal==-1 indicates ')' without '('
bal>0 indicates number of '('
we reinitiate bal to 0 once bal==-1 and when this happens, we also ans++;
class Solution {
public:
    int minAddToMakeValid(string s) {
        int ans=0, bal=0;
        for (auto i:s)
        {
            if (i=='(')
                bal++;
            else
                bal--;
            if (bal==-1)
            {
                bal++;
                ans++;
            }
        }
        return ans+bal;
    }
};